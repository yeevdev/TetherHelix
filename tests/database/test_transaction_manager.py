#generated by chatgpt-4o
#sanitized by ReenAG

from faker import Faker
import datetime

# Faker 인스턴스 생성 (더미 데이터용)
faker = Faker()

def test_bid_placed(dao):
    """매수 주문을 DB에 추가하고 확인"""
    bid_uuid = faker.uuid4()
    bid_price = 1500
    tether_volume = 10.5
    bid_krw = bid_price * tether_volume
    bid_fee = bid_krw * 0.001
    bid_created_at = datetime.datetime.now().isoformat()

    dao.bid_placed(bid_uuid, bid_created_at, bid_price, tether_volume, bid_krw, bid_fee)
    transaction = dao.get_transaction_by_bid_uuid(bid_uuid)

    assert transaction is not None
    assert transaction.bid_uuid == bid_uuid
    assert transaction.order_status == "BID_PLACED"

def test_bid_filled(dao):
    """매수 체결 후 상태가 변경되는지 확인"""
    bid_uuid = faker.uuid4()
    timestamp = datetime.datetime.now().isoformat()
    dao.bid_placed(bid_uuid, timestamp, 1500, 5, 7500, 7.5)  # 더미 데이터 입력

    dao.bid_filled(bid_uuid, timestamp)
    transaction = dao.get_transaction_by_bid_uuid(bid_uuid)

    assert transaction is not None
    assert transaction.order_status == "BID_FILLED"

def test_ask_placed_and_filled(dao):
    """매도 주문 및 매도 체결 테스트"""
    bid_uuid = faker.uuid4()
    ask_uuid = faker.uuid4()
    timestamp = datetime.datetime.now().isoformat()

    dao.bid_placed(bid_uuid, timestamp, 1500, 5, 7500, 7.5)
    dao.bid_filled(bid_uuid, timestamp)
    dao.ask_placed(bid_uuid, ask_uuid, timestamp, 1600, 1600 * 5 * 0.01)  # 매도 주문 추가

    transaction = dao.get_transaction_by_bid_uuid(bid_uuid)
    assert transaction is not None
    assert transaction.ask_uuid == ask_uuid
    assert transaction.order_status == "ASK_PLACED"

    dao.ask_filled(ask_uuid, timestamp)
    transaction = dao.get_transaction_by_bid_uuid(bid_uuid)

    assert transaction.order_status == "ASK_FILLED"

def test_get_transactions_by_status(dao):
    """특정 상태의 트랜잭션을 가져오는지 확인"""
    timestamp = datetime.datetime.now().isoformat()
    dao.bid_placed(faker.uuid4(), timestamp, 1500, 5, 7500, 7.5)
    dao.bid_placed(faker.uuid4(), timestamp, 1500, 3, 4500, 4.5)

    transactions = dao.get_transactions_by_status("BID_PLACED")
    assert len(transactions) >= 2
    assert all(tx.order_status == "BID_PLACED" for tx in transactions)